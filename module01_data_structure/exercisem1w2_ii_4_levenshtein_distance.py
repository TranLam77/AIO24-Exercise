# -*- coding: utf-8 -*-
"""ExerciseM1W2_II.4.levenshtein_distance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UXvJeTyDC6-o-wiIbaP9aSY8BY5D2cL_
"""

# define functions calculate costs
def ins_cost():
    return 1
def del_cost():
    return 1
def sub_cost(source, target):
    if source == target:
        return 0
    else:
        return 1

# define min_cost function
def min_cost(a):
    return min(a)

# define function levenshtein_distance
def levenshtein_distance(source, target):
    # Your Code Here
    # Step 1. build a matrix with rows = len(source) + 1, cols = len(target) + 1
    distance_matrix = [[0 for _ in range(len(target) + 1)] for _ in range(len(source) + 1)]
    # Step 2.
    # initialize the first row
    for i in range(len(target) + 1):
        distance_matrix[0][i] = i
    # initialize the first column
    for j in range(len(source) + 1):
        distance_matrix[j][0] = j
    # Step 3. calculate value for the other cells in distance_matrix
    for i in range(1, len(source) + 1):
        for j in range(1, len(target) + 1):
            distance_matrix[i][j] = min(distance_matrix[i-1][j]  + del_cost(),
                                       distance_matrix[i][j-1] + ins_cost(),
                                       distance_matrix[i-1][j-1] + sub_cost(source[i-1], target[j-1]))

    # Step 4
    distance = distance_matrix[-1][-1]
    # End Code Here

    return distance

assert levenshtein_distance ("hi", "hello") == 4
print(levenshtein_distance ("hola", "hello"))

#Đáp án là c) 3.0